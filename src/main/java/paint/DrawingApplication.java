/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package paint;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Merna
 */
public class DrawingApplication extends javax.swing.JFrame implements Node {
public static Graphics g;

    drawingEngineData d = new drawingEngineData();
    private Shape selectedShape;

    /**
     * Creates new form DrawingApplication
     */
    public DrawingApplication() {
        initComponents();
        this.setTitle("Vector Drawing application");
        //g=this.canvas.getGraphics();
        this.setSize(1000, 600);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        circle = new javax.swing.JButton();
        selector = new javax.swing.JComboBox<>();
        rec = new javax.swing.JButton();
        line = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        colorize = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        triangle = new javax.swing.JButton();
        canvas = d;
        copy = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Save = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("program");

        circle.setText("Oval");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });

        selector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorActionPerformed(evt);
            }
        });

        rec.setText("Rectangle");
        rec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recActionPerformed(evt);
            }
        });

        line.setText("Line segement");
        line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineActionPerformed(evt);
            }
        });

        jLabel2.setText("select shape");

        colorize.setText("Colorize");
        colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        triangle.setText("Triangle");
        triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleActionPerformed(evt);
            }
        });

        canvas.setBackground(new java.awt.Color(255, 255, 255));
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );

        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        jMenuItem1.setText("Load");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colorize)
                                .addGap(18, 18, 18)
                                .addComponent(delete))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(copy)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                        .addComponent(triangle)
                        .addGap(63, 63, 63)
                        .addComponent(circle)
                        .addGap(42, 42, 42)
                        .addComponent(rec)
                        .addGap(34, 34, 34)
                        .addComponent(line)
                        .addGap(64, 64, 64))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(triangle))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(line, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rec, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(circle, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorize)
                            .addComponent(delete))
                        .addGap(28, 28, 28)
                        .addComponent(copy)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_selectorActionPerformed

    private Shape searchShape(String Key) {
            Shape[] shapes = d.getShapes();
            for (Shape shap : shapes) {
                if (Key.equals(shap.getName_key())) {
                    return shap;
                }

            }
        
        return null;

    }
    private void recActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recActionPerformed
        // TODO add your handling code here:
        drawRectangle rectangle = new drawRectangle(d, selector);
        this.setVisible(true);
        rectangle.setParentNode((Node) this);
        rectangle.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_recActionPerformed

    private void lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineActionPerformed
        // TODO add your handling code here:
        drawLine line = new drawLine(d, selector);
        this.setVisible(true);
        line.setParentNode((Node) this);
        line.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_lineActionPerformed

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
        // TODO add your handling code here:
        drawCircle circle = new drawCircle(d, selector);
        this.setVisible(true);
        circle.setParentNode((Node) this);
        circle.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_circleActionPerformed

    private void colorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeActionPerformed
        // TODO add your handling code here:
        String x=(String)selector.getSelectedItem();
        if(x!=null)
        {    
        Shape s = searchShape(x);
        if (s != null) {
            colour c = new colour(s, d, canvas.getGraphics());
            this.setVisible(true);
            c.setParentNode((Node) this);
            c.setVisible(true);
        }
        }
        else
             JOptionPane.showMessageDialog(null, "No shapes found");
    }//GEN-LAST:event_colorizeActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
         String x=(String)selector.getSelectedItem();
        if(x!=null)
        {    
        Shape s = searchShape(x);

        if (s != null) {
            selector.removeItem(selector.getSelectedItem().toString());
            d.removeShape(s);
            d.deleteCorners();
            d.refresh(canvas.getGraphics());
        }
        }
        else
             JOptionPane.showMessageDialog(null, "No shapes found");

    }//GEN-LAST:event_deleteActionPerformed

    private void triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleActionPerformed
      
        drawTriangle triangle = new drawTriangle(d, selector);
        this.setVisible(true);
        triangle.setParentNode((Node) this);
        triangle.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_triangleActionPerformed

    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
    
        Point p = evt.getPoint();
        if(selector.getSelectedIndex()!=-1)
        {
           {Shape s = searchShape((String) selector.getSelectedItem());
         if(s instanceof Rectangle)
         {
              Rectangle r = (Rectangle) s;
                if (VertexExist(r.getDraggingPoint())) {
                    System.out.println("Vertexxxxx");
                    System.out.println(r.getDraggingPoint().x+ "dragiing pnt "+ r.getDraggingPoint().y);
                    r.resize(posOfCorner(r.getDraggingPoint()), p);
                    r.setDraggingPoint(p);
                    repaint();
                } else {
                    d.deleteCorners();
                    r.moveTo(p);
                    r.setDraggingPoint(p);
                    r.setCorners();
                    Point[] pnt = r.getCorners();
                    d.drawCorners(pnt);
                    repaint();
                }
         }
         if(s instanceof Circle)
         {
           Circle c = (Circle) s;
                if (VertexExist(c.getDraggingPoint())) {
                    System.out.println("Vertexxxxx");
                    System.out.println(c.getDraggingPoint().x+ "dragiing pnt "+ c.getDraggingPoint().y);
                    c.resize(posOfCorner(c.getDraggingPoint()), p);
                    c.setDraggingPoint(p);
                    repaint();
                } else {
                    d.deleteCorners();
                    c.moveTo(p);
                    c.setDraggingPoint(p);
                    c.setCorners();
                    Point[] pnt = c.getCorners();
                    d.drawCorners(pnt);
                    repaint();
                }
         }
         if(s instanceof Triangle)
         {
             Triangle t=(Triangle)s;
             if (VertexExist(t.getDraggingPoint())) {
                    System.out.println("Vertexxxxx");
                    System.out.println(t.getDraggingPoint().x+ "dragiing pnt "+ t.getDraggingPoint().y);
                    t.resize(posOfCorner(t.getDraggingPoint()), p);
                    t.setDraggingPoint(p);
                    repaint();
                } else {
                    d.deleteCorners();
                    t.moveTo(p);
                    t.setDraggingPoint(p);
                    t.setCorners();
                    Point[] pnt = t.getCorners();
                    d.drawCorners(pnt);
                    repaint();
                }
         }
         if(s instanceof LineSegment)
         {
            LineSegment l=(LineSegment)s; 
            if (VertexExist(l.getDraggingPoint())) {
                    System.out.println("Vertexxxxx");
                    System.out.println(l.getDraggingPoint().x+ "dragiing pnt "+ l.getDraggingPoint().y);
                    l.resize(posOfCorner(l.getDraggingPoint()), p);
                    l.setDraggingPoint(p);
                    repaint();
                } else {
                    d.deleteCorners();
                    l.moveTo(p);
                    l.setDraggingPoint(p);
                    l.setCorners();
                    Point[] pnt = l.getCorners();
                    d.drawCorners(pnt);
                    repaint();
                }
         }
         
         
        d.refresh();
        } }
    }//GEN-LAST:event_canvasMouseDragged

    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed

    }//GEN-LAST:event_canvasMousePressed

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
      
             Point p = evt.getPoint();
        Shape[] shapes = d.getShapes();
    for(int i=shapes.length-1;i>=0;i--)
     {
                if( shapes[i] instanceof Rectangle)
                {
                   selector.setSelectedItem(shapes[i].getName_key());
                    Rectangle r=((Rectangle)(shapes[i]));
                    if(r.contains(p))
                    {    
                    r.setDraggingPoint(p);
                    Point[]corners= r.getCorners();
                    d.drawCorners(corners);
                    d.refresh();
                    break;}
                   else if(VertexExist(p))
                    {
                        r.setDraggingPoint(p );
                        
                    }
                }
               else if( shapes[i] instanceof Circle)
                { Circle c=((Circle)(shapes[i]));
                selector.setSelectedItem(shapes[i].getName_key());
                if(c.contains(p))
                    {    
                    c.setDraggingPoint(p);
                    Point[]corners= c.getCorners();
                    d.drawCorners(corners);
                    d.refresh();break;}
                   else if(VertexExist(p))
                    {
                        c.setDraggingPoint(p );
                    }             
                }
               else if( shapes[i] instanceof Triangle)
                {
                    Triangle t=((Triangle)(shapes[i]));
                    selector.setSelectedItem(shapes[i].getName_key());
                     if(t.contains(p))
                    {   
                    t.setDraggingPoint(p);
                    Point[]corners= t.getCorners();
                    d.drawCorners(corners);
                    d.refresh();break;}
                   else if(VertexExist(p))
                    {
                        t.setDraggingPoint(p ); 
                    }
                }
               else if(shapes[i] instanceof LineSegment)
                {
                   LineSegment l=((LineSegment)(shapes[i]));
                   selector.setSelectedItem(shapes[i].getName_key());
                     if(l.contains(p))
                    {   
                    l.setDraggingPoint(p);
                    Point[]corners= l.getCorners();
                    d.drawCorners(corners);
                    d.refresh();}
                   else if(VertexExist(p))
                    {
                        l.setDraggingPoint(p ); 
                    }
                }
                else
               {
                  selector.setSelectedIndex(-1);
               
               }
           
              
            
           
        }
   
       
    
    }//GEN-LAST:event_canvasMouseClicked
public boolean VertexExist(Point p)
{
    boolean flag=false;
     Shape[] corners = d.getCorners();//smallCircles
     java.awt.Rectangle r=new java.awt.Rectangle();
            for (Shape i : corners) {
                Point pos=i.getPosition();
                r.setLocation(pos);
                r.setSize(((Rectangle)i).getWidth(),((Rectangle)i).getLength());
                        
            if(r.contains(p))
            {
                System.out.println("exists");
                flag=true;
                break;
            }
            }
    return flag;
}
public Point posOfCorner(Point p)
{
    
    Shape[] corners = d.getCorners();//smallRectangles
    Rectangle r=new Rectangle(new Point(0,0),10,10);
            for (Shape i : corners) {
                 r=(Rectangle)i;
                        if(r.contains(p))
                         { System.out.println("found");break;
                             //return new Point(((Rectangle)i).getPosition().x+5,((Rectangle)i).getPosition().y+5);
                         }
            }
            System.out.println(r.getPosition().x+ "possss"+ r.getPosition().y);
            return r.getPosition();
          
}
           

    
    
    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_copyActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        save s= new save();
        
    }//GEN-LAST:event_SaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrawingApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrawingApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Save;
    private javax.swing.JPanel canvas;
    private javax.swing.JButton circle;
    private javax.swing.JButton colorize;
    private javax.swing.JButton copy;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton line;
    private javax.swing.JButton rec;
    private javax.swing.JComboBox<String> selector;
    private javax.swing.JButton triangle;
    // End of variables declaration//GEN-END:variables

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setParentNode(Node node) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
